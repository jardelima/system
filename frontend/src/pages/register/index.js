import { Palanquin } from "next/font/google";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

import { useState } from "react";

import Error from "@/components/Error";
import Loading from "@/components/Loading";
import Success from "@/components/Success";

import axios from "axios";
import { ErrorMessage, Field, Form, Formik } from "formik";
import { object, string, ref } from "yup";

const palanquin = Palanquin({
    weight: ["400", "700"],
    subsets: ["latin"],
    variable: "--font-palanquin"
});

const registerSchema = object({
    name: string()
        .min(3, "O campo deve ter no mínimo 3 caracteres")
        .required("Campo obrigatório!"),
    lastName: string()
        .min(3, "O campo deve ter no mínimo 3 caracteres")
        .required("Campo obrigatório!"),
    email: string().email("E-mail inválido!").required("Campo obrigatório!"),
    password: string().required("Campo obrigatório"),
    confirmPassword: string()
        .oneOf([ref("password"), null], "Senhas não são iguais")
        .required("Campo obrigatório")
});

function Register() {
    const [isSuccess, setIsSuccess] = useState(false);
    const [isFail, setIsFail] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    const initialValues = {
        name: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: ""
    };

    const handleSubmit = async (values, { setSubmitting }) => {
        setIsLoading(true);
        setIsFail(false);

        try {
            axios
                .post(`http://localhost:8080/register`, {
                    name: values.name,
                    lastName: values.lastName,
                    email: values.email,
                    password: values.password
                })
                .then((response) => {
                    response.status === 201 && setIsSuccess(true);
                })
                .catch((error) => {
                    console.log(error);
                    setIsFail(true);
                });
        } catch (error) {
            console.log(error);
        } finally {
            setSubmitting(false);
            setIsLoading(false);
        }
    };

    return (
        <>
            <Head>
                <title>SYSTEM - REGISTER</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {isLoading && <Loading />}
            {isSuccess && <Success />}
            {isFail && (
                <Error
                    active={true}
                    message={
                        "Erro ao realizar cadastro. Tente novamente mais tarde."
                    }
                />
            )}

            <section className="bg-beige flex items-center justify-center relative w-full h-screen">
                <div className="bg-white p-8 w-full max-w-md rounded-md flex flex-col items-center justify-center shadow-md relative">
                    <Image
                        className="block w-auto object-contain mb-5"
                        src={"/logo.svg"}
                        width={139}
                        height={32}
                        alt="Logo do sistema chamado System."
                    />

                    <Link
                        className="w-12 h-12 bg-opacity-0 border-0 flex items-center justify-center text-lg absolute top-5 left-4 cursor-pointer"
                        href={"/"}
                    >
                        &lsaquo;
                    </Link>

                    <Formik
                        onSubmit={handleSubmit}
                        initialValues={initialValues}
                        validationSchema={registerSchema}
                        validateOnMount={true}
                    >
                        {({ isSubmitting }) => (
                            <Form className="w-full">
                                <div className="flex items-start justify-start flex-col w-full mb-5">
                                    <Field
                                        className="block w-full h-10 px-4 border border-border text-sm text-text rounded-md bg-white outline-none mb-3 focus:border-green"
                                        name="name"
                                        type="text"
                                        placeholder="Nome"
                                    />
                                    <ErrorMessage
                                        className={`${palanquin.variable} text-red text-xs uppercase font-bold`}
                                        name="name"
                                        component="span"
                                    />
                                </div>

                                <div className="flex items-start justify-start flex-col w-full mb-5">
                                    <Field
                                        className="block w-full h-10 px-4 border border-border text-sm text-text rounded-md bg-white outline-none mb-3 focus:border-green"
                                        name="lastName"
                                        type="text"
                                        placeholder="Sobrenome"
                                    />
                                    <ErrorMessage
                                        className={`${palanquin.variable} text-red text-xs uppercase font-bold`}
                                        name="lastName"
                                        component="span"
                                    />
                                </div>

                                <div className="flex items-start justify-start flex-col w-full mb-5">
                                    <Field
                                        className="block w-full h-10 px-4 border border-border text-sm text-text rounded-md bg-white outline-none mb-3 focus:border-green"
                                        name="email"
                                        type="email"
                                        placeholder="exemplo@email.com"
                                    />
                                    <ErrorMessage
                                        className={`${palanquin.variable} text-red text-xs uppercase font-bold`}
                                        name="email"
                                        component="span"
                                    />
                                </div>

                                <div className="flex items-start justify-start flex-col w-full mb-5">
                                    <Field
                                        className="block w-full h-10 px-4 border border-border text-sm text-text rounded-md bg-white outline-none mb-3 focus:border-green"
                                        name="password"
                                        type="password"
                                        placeholder="***"
                                    />
                                    <ErrorMessage
                                        className={`${palanquin.variable} text-red text-xs uppercase font-bold`}
                                        name="password"
                                        component="span"
                                    />
                                </div>

                                <div className="flex items-start justify-start flex-col w-full mb-5">
                                    <Field
                                        className="block w-full h-10 px-4 border border-border text-sm text-text rounded-md bg-white outline-none mb-3 focus:border-green"
                                        name="confirmPassword"
                                        type="password"
                                        placeholder="***"
                                    />
                                    <ErrorMessage
                                        className={`${palanquin.variable} text-red text-xs uppercase font-bold`}
                                        name="confirmPassword"
                                        component="span"
                                    />
                                </div>

                                <input
                                    disabled={isSubmitting}
                                    className={`${palanquin.variable} w-full max-w-xs bg-green text-white uppercase text-xs font-bold border-0 px-4 py-3 rounded-md flex items-center justify-center mx-auto duration-300 hover:brightness-95 cursor-pointer`}
                                    type="submit"
                                    id="submit"
                                    value="Cadastre-se"
                                />
                            </Form>
                        )}
                    </Formik>
                </div>
            </section>
        </>
    );
}

export default Register;
